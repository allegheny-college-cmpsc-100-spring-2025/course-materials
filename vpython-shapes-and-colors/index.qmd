
---
title: "Vpython Shapes And Colors"
subtitle: "CMPSC 100: Computational Expression, Spring 2025"
author: "Morgan Green"
slide-number: true
format:
  revealjs: 
    theme: [dark, ../custom.scss]
touch: true
controls: true
---

::: incremental
# Console

![Alt text](image.png)

The console is where you can see the text output of your code.

In a plain Python Trinket, the console is to the right of the code editor.

In a VPython Trinket, the console is to the right of the code editor and beneath the Canvas.


:::
::: incremental
# Errors

![](image-7.png)

If your code isn't working, Python will give you a clue about the problem by displaying an **error**.  
In Trinket, errors show up at the bottom of the screen. Sometimes they will show a line #, other times they unfortunately will not.

[\-> Built In Python Functions](/vpython-shapes-and-colors/03_builtInPythonFunctions.md)
:::
::: incremental
# Built-In Python Functions

We will learn more about functions later on in the semester, but for now you just need to know a little bit about what a function is and how to call it.

A function is a block of code that has been packaged under a single name for convenient access. You can deploy that block of code simply by **calling** the function's name.

Functions we've used in class so far include `print()` which prints text to the console and `str()`, which converts values to the string datatype.


:::
::: incremental
# Function Calling Syntax

A function call will always consist of the name of the function, followed by open and close parens `()`.

Many functions receive inputs, known as **arguments.** When you are feeding a function arguments, you put them **between** the open and close parens: `(<arguments>)`.

For example, the print function requires some text for it to print. So to print hello world, you would type:

```
print("Hello world!")
```

[\-> VPython Shapes](/vpython-shapes-and-colors/05_vpythonShapes.md)
:::
::: incremental
# VPython Shapes

![Alt text](image-4.png)

VPython shapes are deployed through a special Python datatype called a `class`. We will learn more about classes toward the end of the semester.

For now, you just need to make sure your syntax and punctuation are consistent with what's demonstrated.

See [this example](https://trinket.io/glowscript/dfa8dc7476).

[\-> VPython Colors](/vpython-shapes-and-colors/06_vpythonColors.md)
:::
::: incremental
# VPython Colors

Like VPython coordinates, VPython colors are assignmed using vectors.

Instead of the vector values standing for `(x, y, z)` they stand for `(Red, Green, Blue)`.

Each one has a value between 0 and 1, so pure red would be `vector(1, 0, 0)` and pure blue is `vector(0, 0, 1)`

You can convert color values from 256 RGB color encoding (easily found online) as follows:

```
#colors encoded in 256 color RBG format
#(a format very commonly found online)
r256 =     0
g256 = 163
b256 = 108

#convert from 256 color scheme to 0-1
r1 = r256/255
g1 = g256/255
b1 = b256/255

t = pyramid() #draw pyramid
#color pyramid using converted colors
t.color = vector(r1, g1, b1)
```


:::
::: incremental
# Color Resources

There are a lot of fun free color resources available online, where you can find RGB encoded colors for converting in VPython.

<img src = "image-5.png" width = "600px" />

Resource links: [Munsell Color Palette](https://pteromys.melonisland.net/munsell/), [Adobe Color](https://color.adobe.com/create/color-wheel):::

---
title: "Vpython Shapes And Colors"
subtitle: "CMPSC 100: Computational Expression, Spring 2025"
author: "Morgan Green"
slide-number: true
format:
  revealjs: 
    theme: [dark, ../custom.scss]
touch: true
controls: true
---

::: incremental
# Console

![Alt text](image.png)

The console is where you can see the text output of your code.

In a plain Python Trinket, the console is to the right of the code editor.

In a VPython Trinket, the console is to the right of the code editor and beneath the Canvas.


:::
::: incremental
# Errors

![](image-7.png)

If your code isn't working, Python will give you a clue about the problem by displaying an **error**.  
In Trinket, errors show up at the bottom of the screen. Sometimes they will show a line #, other times they unfortunately will not.

[\-> Built In Python Functions](/vpython-shapes-and-colors/03_builtInPythonFunctions.md)
:::
::: incremental
# Built-In Python Functions

We will learn more about functions later on in the semester, but for now you just need to know a little bit about what a function is and how to call it.

A function is a block of code that has been packaged under a single name for convenient access. You can deploy that block of code simply by **calling** the function's name.

Functions we've used in class so far include `print()` which prints text to the console and `str()`, which converts values to the string datatype.


:::
::: incremental
# Function Calling Syntax

A function call will always consist of the name of the function, followed by open and close parens `()`.

Many functions receive inputs, known as **arguments.** When you are feeding a function arguments, you put them **between** the open and close parens: `(<arguments>)`.

For example, the print function requires some text for it to print. So to print hello world, you would type:

```
print("Hello world!")
```

[\-> VPython Shapes](/vpython-shapes-and-colors/05_vpythonShapes.md)
:::
::: incremental
# VPython Shapes

![Alt text](image-4.png)

VPython shapes are deployed through a special Python datatype called a `class`. We will learn more about classes toward the end of the semester.

For now, you just need to make sure your syntax and punctuation are consistent with what's demonstrated.

See [this example](https://trinket.io/glowscript/dfa8dc7476).

[\-> VPython Colors](/vpython-shapes-and-colors/06_vpythonColors.md)
:::
::: incremental
# VPython Colors

Like VPython coordinates, VPython colors are assignmed using vectors.

Instead of the vector values standing for `(x, y, z)` they stand for `(Red, Green, Blue)`.

Each one has a value between 0 and 1, so pure red would be `vector(1, 0, 0)` and pure blue is `vector(0, 0, 1)`

You can convert color values from 256 RGB color encoding (easily found online) as follows:

```
#colors encoded in 256 color RBG format
#(a format very commonly found online)
r256 =     0
g256 = 163
b256 = 108

#convert from 256 color scheme to 0-1
r1 = r256/255
g1 = g256/255
b1 = b256/255

t = pyramid() #draw pyramid
#color pyramid using converted colors
t.color = vector(r1, g1, b1)
```


:::
::: incremental
# Color Resources

There are a lot of fun free color resources available online, where you can find RGB encoded colors for converting in VPython.

<img src = "image-5.png" width = "600px" />

Resource links: [Munsell Color Palette](https://pteromys.melonisland.net/munsell/), [Adobe Color](https://color.adobe.com/create/color-wheel):::

---
title: "Vpython Shapes And Colors"
subtitle: "CMPSC 100: Computational Expression, Spring 2025"
author: "Morgan Green"
slide-number: true
format:
  revealjs: 
    theme: [dark, ../custom.scss]
touch: true
controls: true
---

::: incremental
# Console

![Alt text](image.png)

The console is where you can see the text output of your code.

In a plain Python Trinket, the console is to the right of the code editor.

In a VPython Trinket, the console is to the right of the code editor and beneath the Canvas.


:::
::: incremental
# Errors

![](image-7.png)

If your code isn't working, Python will give you a clue about the problem by displaying an **error**.  
In Trinket, errors show up at the bottom of the screen. Sometimes they will show a line #, other times they unfortunately will not.

[\-> Built In Python Functions](/vpython-shapes-and-colors/03_builtInPythonFunctions.md)
:::
::: incremental
# Built-In Python Functions

We will learn more about functions later on in the semester, but for now you just need to know a little bit about what a function is and how to call it.

A function is a block of code that has been packaged under a single name for convenient access. You can deploy that block of code simply by **calling** the function's name.

Functions we've used in class so far include `print()` which prints text to the console and `str()`, which converts values to the string datatype.


:::
::: incremental
# Function Calling Syntax

A function call will always consist of the name of the function, followed by open and close parens `()`.

Many functions receive inputs, known as **arguments.** When you are feeding a function arguments, you put them **between** the open and close parens: `(<arguments>)`.

For example, the print function requires some text for it to print. So to print hello world, you would type:

```
print("Hello world!")
```

[\-> VPython Shapes](/vpython-shapes-and-colors/05_vpythonShapes.md)
:::
::: incremental
# VPython Shapes

![Alt text](image-4.png)

VPython shapes are deployed through a special Python datatype called a `class`. We will learn more about classes toward the end of the semester.

For now, you just need to make sure your syntax and punctuation are consistent with what's demonstrated.

See [this example](https://trinket.io/glowscript/dfa8dc7476).

[\-> VPython Colors](/vpython-shapes-and-colors/06_vpythonColors.md)
:::
::: incremental
# VPython Colors

Like VPython coordinates, VPython colors are assignmed using vectors.

Instead of the vector values standing for `(x, y, z)` they stand for `(Red, Green, Blue)`.

Each one has a value between 0 and 1, so pure red would be `vector(1, 0, 0)` and pure blue is `vector(0, 0, 1)`

You can convert color values from 256 RGB color encoding (easily found online) as follows:

```
#colors encoded in 256 color RBG format
#(a format very commonly found online)
r256 =     0
g256 = 163
b256 = 108

#convert from 256 color scheme to 0-1
r1 = r256/255
g1 = g256/255
b1 = b256/255

t = pyramid() #draw pyramid
#color pyramid using converted colors
t.color = vector(r1, g1, b1)
```


:::
::: incremental
# Color Resources

There are a lot of fun free color resources available online, where you can find RGB encoded colors for converting in VPython.

<img src = "image-5.png" width = "600px" />

Resource links: [Munsell Color Palette](https://pteromys.melonisland.net/munsell/), [Adobe Color](https://color.adobe.com/create/color-wheel):::
