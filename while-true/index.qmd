
---
title: "While True"
subtitle: "CMPSC 100: Computational Expression, Spring 2025"
author: "Morgan Green"
slide-number: true
format:
  revealjs: 
    theme: [dark, ../custom.scss]
touch: true
controls: true
---

::: incremental
# Variables Review

When you call a variable's name, Python substitutes the variable for the value it holds.


<br>

```
name = "Ron Cole"
print("Hi " + name + "!")
print("Bye " + name + "!")

```
<br>
produces the same reults as 

<br>

```
print("Hi Ron Cole!")
print("Bye Ron Cole!")
```
<br>
However the first code block is more powerful and flexible. See [this demo](https://trinket.io/python/8d6dd97818) 



:::
::: incremental
# Variables Review in VPython

<img src = "image.png" width = "350px">

The same concept applies whenever you want to use the same value more than once, especially if that value might change! Like how all of these shapes have the same y and z coordinates.

Try changing the values on line 6 and z in [this example](https://trinket.io/glowscript/b21ce9cf3f). Much more efficient than changing them individually for all four shapes.



:::
::: incremental
# While Loops Review

```
i = 1
while i < 4:
    print(i * 'X')
    i = i + 1
```

Here's a breakdown of what the above code does

| i | output |   
| - | ------ | 
| 1 | X      |   
| 2 | XX     |   
| 3 | XXX   |   

There is no fourth row because afer the third loop, the loop's condition is no longer true. 



:::
::: incremental
# While Loops in VPython

<img src = "image-1.png" width = "500px">


We can apply these same concepts in VPython. [Click here](https://trinket.io/glowscript/3c22a66b8c) to see the Trinket. 

:::
::: incremental
# VPython Animations with While Loops

Another way to use while-loops is to create animations in VPython. <br><br>

```
b = box(pos = vector(-5, 0, 0))
while b.pos.x < 5:
    rate(10)
    b.pos.x += 0.1
```
<br>

This code moves box b 0.1 units to the right every 1/10 of a second until it gets to position 5. [See it on Trinket.](https://trinket.io/glowscript/f7d68bb49b)

:::
::: incremental
# Rate

The `rate()` function in VPython tells Python how many frames per second your animation should run.
<br><br>
```
rate(10) # 10 frames per second, a good default
rate(100) # 100 frames per second, may be too fast 
rate(0.5) # half a famer per second, good for testing in slow mo
```
<br>
If you don't include a `rate()` function in your animation, in won't run properly, and might crash you browser. 

:::
::: incremental
# while True

If you want your animation to run continously, you can use `while True:` a condition which is always true.
<br><br>
This is an exception to the no-infinity rule. It is okay to run an infinite loop in this case, because it will include a `rate()` function. This function causes Python to pause periodically as the program runs, so it doesn't get overwhelmed. 
<br><br>
Other time functions like `sleep()` can have the same effect. 

:::
::: incremental
# Animations with Modulus

You can use a modulus to make the same animation run on a loop. Let's update the previous example:

```
b = box(pos = vector(0, 0, 0))
while True:
    rate(10)
    b.pos.x = (b.pos.x + 0.2) % 3
```
[See it on Trinket here](https://trinket.io/glowscript/46cce4015f)
:::
