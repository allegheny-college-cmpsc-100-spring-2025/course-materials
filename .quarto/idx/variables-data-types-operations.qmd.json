{"title":"Variables, Data Types, and Operations","markdown":{"yaml":{"title":"Variables, Data Types, and Operations","subtitle":"CMPSC 100: Computational Expression, Spring 2025","author":"Morgan Green","slide-number":true,"format":{"revealjs":{"theme":["dark","custom.scss"]}},"touch":true,"controls":true},"headingText":"Find the MadLib exercise link in Canvas!","containsRefs":false,"markdown":"\n::: incremental\n<img src = \"image.png\" width = \"50%\" />\n:::\n::: incremental\n\n# Code Comments\n\n```python\n# This is a single line comment\n# Python will ignore this text\n```\n- Code comments are text in your code files that Python ignores. \n- They are excellent for explaning what your code does, and for temporarily silencing code you may not want to delete. \n- In this class, we will use more comments than a professional would, because erring on the side of over-explaning is a great way to learn. \n:::\n\n::: incremental\n# Technical Leader Office Hours\n\nWant some computer science support? Technical Leaders have office hours every week!  \nYou can find these office hours linked in Canvas.\n\n\n:::\n\n\n::: incremental\n## Data Types\n\nData types are the kinds of values that variables can hold.\nThe data type of a value affects what you can do with it. \n\n:::\n\n::: incremental\n## String Data Type\n\nStrings are text values. If a variable's value is surrounded with `'` or `\"`, Python gives data type `string`\n\n```\npet1 = \"dog\"\npet2 = 'cat'\n```\nIf Python sees a word without quotes, it will look for a a variable with that name. If it can't find one, it will throw an error.\n\n:::\n\n::: incremental\n\n## Numerical Data Types\n\n### int\n\nInts are integer numerical values.  If a variable is assigned number value with no quotes and no decimal point, Python gives it data type `int`.\n\n```\ni = 2\n```\n\n\n### float\n\nFloats are decimal numerical values. If a variable is assigned number value with no quotes and a decimal point, Python gives it data type `float`. \n\n```\nf = 5.2\n```\n\n\n\n:::\n\n::: incremental\n## Math Operations in Python\n\nPython provides a variety of built-in mathematical operations that can be performed on numeric data types, such as integers and floating-point numbers. Some common math operations include:\n\n### Addition\n```python\nresult = 3 + 5  # Result will be 8\n```\n\n### Subtraction\n```python\nresult = 10 - 3  # Result will be 7\n```\n\n### Multiplication\n```python\nresult = 4 * 6  # Result will be 24\n```\n\n### Division\n```python\nresult = 15 / 3  # Result will be 5.0 (float)\n```\n\n### Modulo (Remainder)\n```python\nresult = 17 % 5  # Result will be 2\n```\n\n### Exponentiation\n```python\nresult = 2 ** 3  # Result will be 8\n```\n\n\n:::\n\n::: incremental\n\n## String Operations in Python\n\nPython also provides various string operations for manipulating and working with text data. Strings can be concatenated, sliced, and formatted in different ways.\n\n### Concatenation\n```python\nstr1 = \"Hello\"\nstr2 = \"World\"\nresult = str1 + \" \" + str2  # Result will be \"Hello World\"\n```\n\n### String Length\n```python\ntext = \"Python\"\nlength = len(text)  # Length will be 6\n```\n\n### String Slicing\n```python\ntext = \"Python\"\nsubstring = text[0:3]  # Result will be \"Pyt\"\n```\n\n\n:::\n\n::: incremental\n### The same operator will sometimes produce different results with different data types\n\n```python\n\n# * with two integers\nresult = 3 * 4 # result will by 12\n\n# * with integer and float\nresult = 3 * 4.0 # result will be 12.0\n\n# * with integer and str\nresult  = \"Hey\" * 3 # result will be HeyHeyHey\n\n\n```\n\n\n\n:::\n\n::: incremental\n## You can name variables *almost* anything you want!*\n\nIt's a good idea to give your variables names that are a happy medium of descriptive and easy to type.\n\n### These two code blocks are the same in effect\n\n```\nclr = \"blue\"\nprint(\"Imagine a \" + clr + \" sky\")\n```\n\n```\nc = \"blue\"\nprint(\"Imagine a \" + c + \" sky\")\n```\nYou can't start variable names with numbers in Python, and also shouldn't give variables names that already have some function (like int, or in VPython, sphere)\n\n\n\n:::\n\n::: incremental\n## Python reads code blocks top to bottom\n\n```python\n\nn = 5 # assigns var n value 5\nprint(n) # output: 5\nn = 7 # reassigns n a new value\nprint(n) # output: 7\nn = n + 2 # assigns n a value based on prior value\nprint(n) # output: 9\n\n```\nThe complete output for the above: \n\n```\n5\n7\n9\n```\n\n:::\n\n::: incremental\n# Attendance Prompt\n\nTake a few minutes to find an image of a 3D graphic that has stuck in your memory. Post it in the class Discord Channel (or email me if you can't see the class channel yet).\n\nWe will go around the room and each person will talk about why the image they selected is unique or memorable. \n\n<img src = \"https://github.com/allegheny-college-cmpsc-100-spring-2024/slides/assets/8368413/90b124e5-da6a-40e4-994d-bafd6eaab8d5\" width = \"600px\">\n\n*image by Jeffrey Stuker*\n\n\n:::\n\n::: incremental\n# Code Comment Syntax\n\nThere are two kinds of Python comments we'll use in this class:\n\n```python\n\n# single line comments, denoted by a hashtag at the start of the comment\n\n'''\n\nmultiline comments, \ndenoted with ''' or \"\"\" at \nthe start and the end of the comment block\n\n'''\n```\n\n\n:::\n\n::: incremental\n# Variables \n\n<img src = \"image-1.png\" width = \"350px\" />\n\n\nVariables are containers: they can hold a variety of different values. You could imagine a variable as a tea bag, and its value as the kind of tea the bag holds. You steep different teas the same way, but the flavor depens what's in the teabag. \n\nIn Python, variables are assigned using the following syntax:\n\n```\nvariable_name = variable_value\n```\n\nEven if youâ€™ve never coded before, you might be familiar with the concept of a variable from taking algebra in school.\n\n\n:::\n","srcMarkdownNoYaml":"\n::: incremental\n# Find the MadLib exercise link in Canvas! \n<img src = \"image.png\" width = \"50%\" />\n:::\n::: incremental\n\n# Code Comments\n\n```python\n# This is a single line comment\n# Python will ignore this text\n```\n- Code comments are text in your code files that Python ignores. \n- They are excellent for explaning what your code does, and for temporarily silencing code you may not want to delete. \n- In this class, we will use more comments than a professional would, because erring on the side of over-explaning is a great way to learn. \n:::\n\n::: incremental\n# Technical Leader Office Hours\n\nWant some computer science support? Technical Leaders have office hours every week!  \nYou can find these office hours linked in Canvas.\n\n\n:::\n\n\n::: incremental\n## Data Types\n\nData types are the kinds of values that variables can hold.\nThe data type of a value affects what you can do with it. \n\n:::\n\n::: incremental\n## String Data Type\n\nStrings are text values. If a variable's value is surrounded with `'` or `\"`, Python gives data type `string`\n\n```\npet1 = \"dog\"\npet2 = 'cat'\n```\nIf Python sees a word without quotes, it will look for a a variable with that name. If it can't find one, it will throw an error.\n\n:::\n\n::: incremental\n\n## Numerical Data Types\n\n### int\n\nInts are integer numerical values.  If a variable is assigned number value with no quotes and no decimal point, Python gives it data type `int`.\n\n```\ni = 2\n```\n\n\n### float\n\nFloats are decimal numerical values. If a variable is assigned number value with no quotes and a decimal point, Python gives it data type `float`. \n\n```\nf = 5.2\n```\n\n\n\n:::\n\n::: incremental\n## Math Operations in Python\n\nPython provides a variety of built-in mathematical operations that can be performed on numeric data types, such as integers and floating-point numbers. Some common math operations include:\n\n### Addition\n```python\nresult = 3 + 5  # Result will be 8\n```\n\n### Subtraction\n```python\nresult = 10 - 3  # Result will be 7\n```\n\n### Multiplication\n```python\nresult = 4 * 6  # Result will be 24\n```\n\n### Division\n```python\nresult = 15 / 3  # Result will be 5.0 (float)\n```\n\n### Modulo (Remainder)\n```python\nresult = 17 % 5  # Result will be 2\n```\n\n### Exponentiation\n```python\nresult = 2 ** 3  # Result will be 8\n```\n\n\n:::\n\n::: incremental\n\n## String Operations in Python\n\nPython also provides various string operations for manipulating and working with text data. Strings can be concatenated, sliced, and formatted in different ways.\n\n### Concatenation\n```python\nstr1 = \"Hello\"\nstr2 = \"World\"\nresult = str1 + \" \" + str2  # Result will be \"Hello World\"\n```\n\n### String Length\n```python\ntext = \"Python\"\nlength = len(text)  # Length will be 6\n```\n\n### String Slicing\n```python\ntext = \"Python\"\nsubstring = text[0:3]  # Result will be \"Pyt\"\n```\n\n\n:::\n\n::: incremental\n### The same operator will sometimes produce different results with different data types\n\n```python\n\n# * with two integers\nresult = 3 * 4 # result will by 12\n\n# * with integer and float\nresult = 3 * 4.0 # result will be 12.0\n\n# * with integer and str\nresult  = \"Hey\" * 3 # result will be HeyHeyHey\n\n\n```\n\n\n\n:::\n\n::: incremental\n## You can name variables *almost* anything you want!*\n\nIt's a good idea to give your variables names that are a happy medium of descriptive and easy to type.\n\n### These two code blocks are the same in effect\n\n```\nclr = \"blue\"\nprint(\"Imagine a \" + clr + \" sky\")\n```\n\n```\nc = \"blue\"\nprint(\"Imagine a \" + c + \" sky\")\n```\nYou can't start variable names with numbers in Python, and also shouldn't give variables names that already have some function (like int, or in VPython, sphere)\n\n\n\n:::\n\n::: incremental\n## Python reads code blocks top to bottom\n\n```python\n\nn = 5 # assigns var n value 5\nprint(n) # output: 5\nn = 7 # reassigns n a new value\nprint(n) # output: 7\nn = n + 2 # assigns n a value based on prior value\nprint(n) # output: 9\n\n```\nThe complete output for the above: \n\n```\n5\n7\n9\n```\n\n:::\n\n::: incremental\n# Attendance Prompt\n\nTake a few minutes to find an image of a 3D graphic that has stuck in your memory. Post it in the class Discord Channel (or email me if you can't see the class channel yet).\n\nWe will go around the room and each person will talk about why the image they selected is unique or memorable. \n\n<img src = \"https://github.com/allegheny-college-cmpsc-100-spring-2024/slides/assets/8368413/90b124e5-da6a-40e4-994d-bafd6eaab8d5\" width = \"600px\">\n\n*image by Jeffrey Stuker*\n\n\n:::\n\n::: incremental\n# Code Comment Syntax\n\nThere are two kinds of Python comments we'll use in this class:\n\n```python\n\n# single line comments, denoted by a hashtag at the start of the comment\n\n'''\n\nmultiline comments, \ndenoted with ''' or \"\"\" at \nthe start and the end of the comment block\n\n'''\n```\n\n\n:::\n\n::: incremental\n# Variables \n\n<img src = \"image-1.png\" width = \"350px\" />\n\n\nVariables are containers: they can hold a variety of different values. You could imagine a variable as a tea bag, and its value as the kind of tea the bag holds. You steep different teas the same way, but the flavor depens what's in the teabag. \n\nIn Python, variables are assigned using the following syntax:\n\n```\nvariable_name = variable_value\n```\n\nEven if youâ€™ve never coded before, you might be familiar with the concept of a variable from taking algebra in school.\n\n\n:::\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"variables-data-types-operations.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.40","auto-stretch":true,"title":"Variables, Data Types, and Operations","subtitle":"CMPSC 100: Computational Expression, Spring 2025","author":"Morgan Green","slideNumber":true,"touch":true,"controls":true,"theme":["dark","custom.scss"]}}},"projectFormats":["html"]}